{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(r'C:\\Users\\USER\\Desktop\\Datasets')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns=[\"Sepal_length\",\"SepalWidth\",\"Petallength\",\"PetalWidth\",\"Species\"]\n",
    "data=pd.read_csv('iris-missing.csv',names=columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sepal_length</th>\n",
       "      <th>SepalWidth</th>\n",
       "      <th>Petallength</th>\n",
       "      <th>PetalWidth</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4.9</td>\n",
       "      <td></td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td></td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sepal_length SepalWidth Petallength PetalWidth      Species\n",
       "0           5.1        3.5         1.4        0.2  Iris-setosa\n",
       "1           4.9                    1.4        0.2  Iris-setosa\n",
       "2           4.7        3.2         1.3             Iris-setosa\n",
       "3           4.6        3.1         1.5        0.2  Iris-setosa\n",
       "4           5.0        3.6         1.4        0.2  Iris-setosa"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 5 columns):\n",
      "Sepal_length    150 non-null float64\n",
      "SepalWidth      150 non-null object\n",
      "Petallength     150 non-null object\n",
      "PetalWidth      150 non-null object\n",
      "Species         150 non-null object\n",
      "dtypes: float64(1), object(4)\n",
      "memory usage: 6.0+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.replace('  ',np.nan,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Changing the data types\n",
    "conv_dic={'Sepal_length':float,'SepalWidth':float,'Petallength':float,'PetalWidth':float}\n",
    "data=data.astype(conv_dic)\n",
    "data['Species']=data.Species.astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sepal_length     float64\n",
       "SepalWidth       float64\n",
       "Petallength      float64\n",
       "PetalWidth       float64\n",
       "Species         category\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sepal_length    0\n",
       "SepalWidth      2\n",
       "Petallength     9\n",
       "PetalWidth      8\n",
       "Species         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking missing values\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sepal_length</th>\n",
       "      <th>SepalWidth</th>\n",
       "      <th>Petallength</th>\n",
       "      <th>PetalWidth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>148.000000</td>\n",
       "      <td>141.000000</td>\n",
       "      <td>142.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.055405</td>\n",
       "      <td>3.754610</td>\n",
       "      <td>1.197887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.436324</td>\n",
       "      <td>1.763052</td>\n",
       "      <td>0.770140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Sepal_length  SepalWidth  Petallength  PetalWidth\n",
       "count    150.000000  148.000000   141.000000  142.000000\n",
       "mean       5.843333    3.055405     3.754610    1.197887\n",
       "std        0.828066    0.436324     1.763052    0.770140\n",
       "min        4.300000    2.000000     1.000000    0.100000\n",
       "25%        5.100000    2.800000     1.600000    0.300000\n",
       "50%        5.800000    3.000000     4.400000    1.300000\n",
       "75%        6.400000    3.300000     5.100000    1.800000\n",
       "max        7.900000    4.400000     6.900000    2.500000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "histogram=data.hist(figsize=(10,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"SepalWidth\"].fillna(data[\"SepalWidth\"].mean(),inplace=True)\n",
    "data[\"Petallength\"].fillna(data[\"Petallength\"].mean(),inplace=True)\n",
    "data[\"PetalWidth\"].fillna(data[\"PetalWidth\"].mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "histogram=data.hist(figsize=(10,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iris-virginica     50\n",
      "Iris-versicolor    50\n",
      "Iris-setosa        50\n",
      "Name: Species, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x148bb317588>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Class distribution\n",
    "print(data[\"Species\"].value_counts())\n",
    "sns.countplot(data[\"Species\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Seperating dependent and independent variable\n",
    "X=data.iloc[:,:-1].values\n",
    "Y=data.iloc[:,-1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encoding the output\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "Y=le.fit_transform(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the dataset into training and testing data\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state =0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scaling the dataset\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train)\n",
    "X_test = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of our model is equal 92.11 %. at k = 2\n"
     ]
    }
   ],
   "source": [
    "# Fitting clasifier to the Training set\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Fitting the model\n",
    "test_scores=[]\n",
    "for i in range(1,15):\n",
    "\n",
    "    knn = KNeighborsClassifier(i)\n",
    "    knn.fit(X_train,y_train)\n",
    "    test_scores.append(knn.score(X_test,y_test))\n",
    "    \n",
    "max_test_score = max(test_scores)\n",
    "test_scores_ind = test_scores.index(max_test_score)\n",
    "\n",
    "# Predicting the Test set results\n",
    "knn = KNeighborsClassifier(test_scores_ind)\n",
    "knn.fit(X_train,y_train)\n",
    "y_pred = knn.predict(X_test)\n",
    "\n",
    "# Acuuracy of the model\n",
    "accuracy = accuracy_score(y_test, y_pred)*100\n",
    "print('Accuracy of our model is equal ' + str(round(accuracy, 2)) + ' %.' , \"at k =\",test_scores_ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross Validation Score: 95.96153846153847   at k = 2\n"
     ]
    }
   ],
   "source": [
    "#Using cross-validation\n",
    "\n",
    "#creating list of K for KNN\n",
    "k_list = list(range(1,50,2))\n",
    "# creating list of cv scores\n",
    "cv_scores = []\n",
    "\n",
    "# perform 10-fold cross validation\n",
    "for k in k_list:\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    scores = cross_val_score(knn, X_train, y_train, cv=10, scoring='accuracy')\n",
    "    cv_scores.append(scores.mean())\n",
    "\n",
    "print(\"Cross Validation Score:\",max(cv_scores)*100,\"  at k =\",cv_scores.index(max(cv_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13  0  0]\n",
      " [ 0 15  1]\n",
      " [ 0  2  7]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        13\n",
      "           1       0.88      0.94      0.91        16\n",
      "           2       0.88      0.78      0.82         9\n",
      "\n",
      "    accuracy                           0.92        38\n",
      "   macro avg       0.92      0.91      0.91        38\n",
      "weighted avg       0.92      0.92      0.92        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Checking confusion metrics\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(cm)\n",
    "\n",
    "# Checking classification_report\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test,y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13  0  0]\n",
      " [ 0 14  2]\n",
      " [ 0  0  9]]\n",
      "Accuracy of our model is equal 94.74 %.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "cl= GaussianNB()\n",
    "# Fitting the model\n",
    "cl.fit(X_train, y_train)\n",
    "\n",
    "# Predicting the Test set results\n",
    "y_predict = cl.predict(X_test)\n",
    "\n",
    "# Checking confusion metrics\n",
    "cm = confusion_matrix(y_test, y_predict)\n",
    "print(cm)\n",
    "\n",
    "# Acuuracy of the model\n",
    "accuracy = accuracy_score(y_test, y_predict)*100\n",
    "print('Accuracy of our model is equal ' + str(round(accuracy, 2)) + ' %.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross Validation Score: 90.76 %\n"
     ]
    }
   ],
   "source": [
    "#Using cross-validation\n",
    "# performing 10-fold cross validation\n",
    "accuracies = cross_val_score(estimator = cl, X = X_train, y = y_train, cv = 10)\n",
    "print(\"Cross Validation Score: {:.2f} %\".format(accuracies.mean()*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13  0  0]\n",
      " [ 0 15  1]\n",
      " [ 0  2  7]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        13\n",
      "           1       0.88      0.94      0.91        16\n",
      "           2       0.88      0.78      0.82         9\n",
      "\n",
      "    accuracy                           0.92        38\n",
      "   macro avg       0.92      0.91      0.91        38\n",
      "weighted avg       0.92      0.92      0.92        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Checking confusion metrics\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(cm)\n",
    "\n",
    "# Checking classification_report\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The KNN algorithm is better then Naive Bayes for iris flower dataset. This is because Naive Bayes overfits the dataset. Although accuracy is greater but cross validation scores is very less."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
